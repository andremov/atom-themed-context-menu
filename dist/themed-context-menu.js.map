{
  "version": 3,
  "sources": ["../src/main.ts", "../src/MenuItem.ts", "../src/Menu.ts", "../src/ThemedContextMenu.ts"],
  "sourcesContent": ["import { ThemedContextMenu } from './ThemedContextMenu';\n\nexport const TCMHandler = new ThemedContextMenu();\n\nexport function activate() {\n    TCMHandler.hijackFunction();\n}\n\nexport function deactivate() {\n    TCMHandler.releaseFunction();\n}\n", "import { ContextMenuItemInterface } from './types';\nimport { Menu } from './Menu';\n\n// handler for the items shown in the context menu, be it a separator or a command\nexport class MenuItem {\n    private element: HTMLHRElement | HTMLDivElement;\n    private command?: string;\n    private commandDetail?: string;\n    private selected: boolean = false;\n    private parent: Menu;\n    private submenuItems?: ContextMenuItemInterface[];\n    private submenu?: Menu;\n    private height: number;\n    private target: EventTarget | null;\n\n    private constructor(\n        element: HTMLHRElement | HTMLDivElement,\n        parent: Menu,\n        height: number,\n        target: EventTarget | null,\n    ) {\n        this.element = element;\n        this.parent = parent;\n        this.height = height;\n        this.target = target;\n\n\n        this.element.addEventListener('click', (e) =>\n            this.onMouseClick(e as MouseEvent),\n        );\n        this.element.addEventListener('mouseenter', (e) =>\n            this.onMouseEnter(e as MouseEvent),\n        );\n    }\n\n    // static function wrapper to create a MenuItem object from a ContextMenuItemInterface object\n    public static createMenuItem(\n        item: ContextMenuItemInterface,\n        parent: Menu,\n    ): MenuItem {\n        // early return for separators\n        if (item.type === 'separator') {\n            return new MenuItem(document.createElement('hr'), parent, 7, null);\n        }\n\n        // create base menu item div element and create menu item object from base div\n        const divElem = document.createElement('div');\n        divElem.classList.add('menu-item');\n        const self = new MenuItem(divElem, parent, 23, parent.target);\n\n        // create menu item label span\n        const menuItemName = document.createElement('span');\n        menuItemName.classList.add('menu-item-name');\n        // if it doesnt have a label, what is it?\n        // i guess a separator wont have a label, but other than that?\n        // should i add an early return case for this?\n        menuItemName.innerHTML = item.label ? item.label : '';\n\n        // create menu item key stroke span\n        const menuItemKey = document.createElement('span');\n        menuItemKey.classList.add('menu-item-key');\n\n        // append menu item elements to base menu item div\n        divElem.appendChild(menuItemName);\n        divElem.appendChild(menuItemKey);\n\n        // if it doesnt have a command it might be a submenu\n        if (item.command !== undefined) {\n            // add command data to menu item object\n            self.command = item.command;\n            self.commandDetail = item.commandDetail;\n\n            // if it has a command, it might have a keymap, so search for it\n            const keyStrokes = atom.keymaps.findKeyBindings({\n                command: item.command,\n            });\n\n            // if it has a keymap, add it to the item key span element\n            if (keyStrokes.length > 0) {\n                menuItemKey.innerHTML =\n                    keyStrokes[keyStrokes.length - 1].keystrokes;\n            }\n        }\n\n        if (item.submenu !== undefined) {\n            divElem.classList.add('has-submenu');\n            self.submenuItems = item.submenu;\n        }\n\n        return self;\n    }\n\n    // on click, execute command and hide the context menu\n    private onMouseClick(e: MouseEvent) {\n        e.stopPropagation();\n        if (this.hasCommand()) {\n            this.execCommand();\n            this.parent.deleteContextMenu();\n        }\n    }\n\n    public hasCommand(): boolean {\n        return this.command !== undefined;\n    }\n\n    // on mouse enter, open submenu and set as selected\n    private onMouseEnter(e: MouseEvent) {\n        e.stopPropagation();\n        this.selected = true;\n        this.parent.unselectAll();\n        this.element.classList.add('selected');\n        if (this.submenuItems) {\n            if (!this.submenu) {\n                let position = this.element.getBoundingClientRect();\n                let fakeEvent = {\n                    ...e,\n                    target: this.target,\n                    clientX: position.left + 300,\n                    clientY: position.top,\n                    isSubmenu: true,\n                };\n                this.submenu = new Menu(fakeEvent, this.submenuItems, false);\n                this.submenu.setVisible(true);\n            } else {\n                this.submenu.setVisible(true);\n            }\n        }\n    }\n\n    public unselect() {\n        this.selected = false;\n        this.element.classList.remove('selected');\n        this.submenu?.setVisible(false);\n    }\n\n    private async execCommand(): Promise<void> {\n\n        if (!this.hasCommand()) {\n            return;\n        }\n\n        let target =\n            this.target ||\n            (atom.workspace.getActiveTextEditor() as any)?.getElement() ||\n            (atom.workspace.getActivePane() as any).getElement();\n\n        await (atom.commands as any).dispatch(\n            target,\n            this.command,\n            this.commandDetail,\n        );\n    }\n\n    public getElement(): HTMLElement {\n        return this.element;\n    }\n\n    public getHeight(): number {\n        return this.height;\n    }\n}\n", "import { MenuItem } from './MenuItem';\nimport { TCMHandler } from './main';\nimport { ContextMenuItemInterface, MousePosition } from './types';\n\nexport class Menu {\n    private visible: boolean = true;\n    private children: MenuItem[] = [];\n    private domElement: HTMLElement;\n    public target: EventTarget | null;\n\n    constructor(\n        e: MousePosition,\n        items: ContextMenuItemInterface[],\n        visible: boolean,\n    ) {\n        this.target = e.target;\n\n        this.domElement = document.createElement('div');\n        this.domElement.classList.add('submenu');\n\n        if (!visible) {\n            this.visible = false;\n            this.domElement.classList.add('invisible');\n        }\n\n        // add context menu items to context menu\n        items.forEach((element) => {\n            this.addItem(element);\n        });\n\n\n        // move context menu position to mouse event position\n        this.domElement.setAttribute('style', this.getPositionStyleString(e));\n\n        TCMHandler.addMenu(this.domElement);\n    }\n\n    public unselectAll() {\n        this.children.forEach((item) => item.unselect());\n    }\n\n    public deleteContextMenu() {\n        TCMHandler.deleteContextMenu();\n    }\n\n    public setVisible(v: boolean) {\n        this.visible = v;\n        if (v) {\n            this.domElement.classList.remove('invisible');\n        } else {\n            this.domElement.classList.add('invisible');\n        }\n    }\n\n    // generates a style string that positions the context menu next to\n    // mouse event, while also preventing it from overflowing\n    private getPositionStyleString(e: MousePosition): string {\n        let x1 = e.clientX + (!e.isSubmenu ? 10 : 0);\n        let y1 = e.clientY + (!e.isSubmenu ? 5 : 0);\n\n        let x2 = Math.min(x1, window.innerWidth - 310);\n        let y2 = Math.min(y1, window.innerHeight - this.getHeight() - 10);\n\n        if (e.isSubmenu) {\n            if (x1 !== x2) {\n                let altx1 = e.clientX - 600;\n                let altx2 = Math.max(altx1, 0);\n                if (altx1 === altx2) {\n                    x2 = altx1;\n                }\n            }\n        }\n\n        return 'top:' + y2 + 'px; left:' + x2 + 'px';\n    }\n\n    // adds a context menu item to context menu\n    private addItem(item: ContextMenuItemInterface): void {\n        const mitem = MenuItem.createMenuItem(item, this);\n        this.children.push(mitem);\n        this.domElement.appendChild(mitem.getElement());\n    }\n\n    // calculate context menu height for positioning function\n    private getHeight(): number {\n        return this.children\n            .map((item) => item.getHeight())\n            .reduce(function (a, b) {\n                return a + b;\n            });\n    }\n\n    public dispose(): void {\n        TCMHandler.removeMenu(this.domElement);\n    }\n}\n", "import { Menu } from './Menu';\nimport { ContextMenuItemInterface, MousePosition } from './types';\n\nexport class ThemedContextMenu {\n    private hijackedFunction: Function | undefined;\n    private container: HTMLElement;\n\n    constructor() {\n        // add click listener to clear the context menu\n        document.addEventListener('click', (e) =>\n            this.onMouseClick(e as MouseEvent),\n        );\n\n        // create the context menu, but make it invisible\n        this.container = document.createElement('div');\n        this.container.classList.add('themed-context-menu');\n        // this.activeContextMenu.classList.add('invisible');\n\n        let aws = document.querySelector('atom-workspace');\n        aws?.appendChild(this.container);\n    }\n\n    // hijack context menu event function\n    hijackFunction() {\n        let contextMenuManager = atom.contextMenu as any;\n        this.hijackedFunction = contextMenuManager.showForEvent;\n        contextMenuManager.showForEvent = (e) => {\n            let data = contextMenuManager.templateForEvent(e);\n            this.displayContextMenu(e, data);\n        };\n    }\n\n    // release context menu event function\n    releaseFunction() {\n        let contextMenuManager = atom.contextMenu as any;\n        contextMenuManager.showForEvent = this.hijackedFunction;\n    }\n\n    displayContextMenu(e: MousePosition, items: ContextMenuItemInterface[]) {\n        this.deleteContextMenu();\n\n        new Menu(e, items, true);\n    }\n\n    addMenu(child: HTMLElement) {\n        this.container.appendChild(child);\n    }\n\n    removeMenu(child: HTMLElement) {\n        this.container.removeChild(child);\n    }\n\n    private onMouseClick(e) {\n        this.deleteContextMenu();\n    }\n\n    deleteContextMenu() {\n        while (this.container.firstChild) {\n            this.container.removeChild(this.container.firstChild);\n        }\n    }\n}\n"],
  "mappings": "gIAAA,yECIO,WAAe,CAWV,YACJ,EACA,EACA,EACA,EACF,CAZM,cAAoB,GAaxB,KAAK,QAAU,EACf,KAAK,OAAS,EACd,KAAK,OAAS,EACd,KAAK,OAAS,EAGd,KAAK,QAAQ,iBAAiB,QAAS,AAAC,GACpC,KAAK,aAAa,IAEtB,KAAK,QAAQ,iBAAiB,aAAc,AAAC,GACzC,KAAK,aAAa,UAKZ,gBACV,EACA,EACQ,CAER,GAAI,EAAK,OAAS,YACd,MAAO,IAAI,GAAS,SAAS,cAAc,MAAO,EAAQ,EAAG,MAIjE,GAAM,GAAU,SAAS,cAAc,OACvC,EAAQ,UAAU,IAAI,aACtB,GAAM,GAAO,GAAI,GAAS,EAAS,EAAQ,GAAI,EAAO,QAGhD,EAAe,SAAS,cAAc,QAC5C,EAAa,UAAU,IAAI,kBAI3B,EAAa,UAAY,EAAK,MAAQ,EAAK,MAAQ,GAGnD,GAAM,GAAc,SAAS,cAAc,QAQ3C,GAPA,EAAY,UAAU,IAAI,iBAG1B,EAAQ,YAAY,GACpB,EAAQ,YAAY,GAGhB,EAAK,UAAY,OAAW,CAE5B,EAAK,QAAU,EAAK,QACpB,EAAK,cAAgB,EAAK,cAG1B,GAAM,GAAa,KAAK,QAAQ,gBAAgB,CAC5C,QAAS,EAAK,UAIlB,AAAI,EAAW,OAAS,GACpB,GAAY,UACR,EAAW,EAAW,OAAS,GAAG,YAI9C,MAAI,GAAK,UAAY,QACjB,GAAQ,UAAU,IAAI,eACtB,EAAK,aAAe,EAAK,SAGtB,EAIH,aAAa,EAAe,CAChC,EAAE,kBACE,KAAK,cACL,MAAK,cACL,KAAK,OAAO,qBAIb,YAAsB,CACzB,MAAO,MAAK,UAAY,OAIpB,aAAa,EAAe,CAKhC,GAJA,EAAE,kBACF,KAAK,SAAW,GAChB,KAAK,OAAO,cACZ,KAAK,QAAQ,UAAU,IAAI,YACvB,KAAK,aACL,GAAK,KAAK,QAYN,KAAK,QAAQ,WAAW,QAZT,CACf,GAAI,GAAW,KAAK,QAAQ,wBACxB,EAAY,IACT,EACH,OAAQ,KAAK,OACb,QAAS,EAAS,KAAO,IACzB,QAAS,EAAS,IAClB,UAAW,IAEf,KAAK,QAAU,GAAI,GAAK,EAAW,KAAK,aAAc,IACtD,KAAK,QAAQ,WAAW,KAO7B,UAAW,CAjItB,MAkIQ,KAAK,SAAW,GAChB,KAAK,QAAQ,UAAU,OAAO,YAC9B,QAAK,UAAL,QAAc,WAAW,SAGf,cAA6B,CAvI/C,MAyIQ,GAAI,CAAC,KAAK,aACN,OAGJ,GAAI,GACA,KAAK,QACJ,SAAK,UAAU,wBAAf,cAA8C,eAC9C,KAAK,UAAU,gBAAwB,aAE5C,KAAO,MAAK,SAAiB,SACzB,EACA,KAAK,QACL,KAAK,eAIN,YAA0B,CAC7B,MAAO,MAAK,QAGT,WAAoB,CACvB,MAAO,MAAK,SC1Jb,WAAW,CAMd,YACI,EACA,EACA,EACF,CATM,aAAmB,GACnB,cAAuB,GAS3B,KAAK,OAAS,EAAE,OAEhB,KAAK,WAAa,SAAS,cAAc,OACzC,KAAK,WAAW,UAAU,IAAI,WAEzB,GACD,MAAK,QAAU,GACf,KAAK,WAAW,UAAU,IAAI,cAIlC,EAAM,QAAQ,AAAC,GAAY,CACvB,KAAK,QAAQ,KAKjB,KAAK,WAAW,aAAa,QAAS,KAAK,uBAAuB,IAElE,EAAW,QAAQ,KAAK,YAGrB,aAAc,CACjB,KAAK,SAAS,QAAQ,AAAC,GAAS,EAAK,YAGlC,mBAAoB,CACvB,EAAW,oBAGR,WAAW,EAAY,CAC1B,KAAK,QAAU,EACf,AAAI,EACA,KAAK,WAAW,UAAU,OAAO,aAEjC,KAAK,WAAW,UAAU,IAAI,aAM9B,uBAAuB,EAA0B,CACrD,GAAI,GAAK,EAAE,QAAW,CAAC,EAAE,UAAiB,EAAL,IACjC,EAAK,EAAE,QAAW,CAAC,EAAE,UAAgB,EAAJ,GAEjC,EAAK,KAAK,IAAI,EAAI,OAAO,WAAa,KACtC,EAAK,KAAK,IAAI,EAAI,OAAO,YAAc,KAAK,YAAc,IAE9D,GAAI,EAAE,WACE,IAAO,EAAI,CACX,GAAI,GAAQ,EAAE,QAAU,IACpB,EAAQ,KAAK,IAAI,EAAO,GAC5B,AAAI,IAAU,GACV,GAAK,GAKjB,MAAO,OAAS,EAAK,YAAc,EAAK,KAIpC,QAAQ,EAAsC,CAClD,GAAM,GAAQ,EAAS,eAAe,EAAM,MAC5C,KAAK,SAAS,KAAK,GACnB,KAAK,WAAW,YAAY,EAAM,cAI9B,WAAoB,CACxB,MAAO,MAAK,SACP,IAAI,AAAC,GAAS,EAAK,aACnB,OAAO,SAAU,EAAG,EAAG,CACpB,MAAO,GAAI,IAIhB,SAAgB,CACnB,EAAW,WAAW,KAAK,cC1F5B,WAAwB,CAI3B,aAAc,CAEV,SAAS,iBAAiB,QAAS,AAAC,GAChC,KAAK,aAAa,IAItB,KAAK,UAAY,SAAS,cAAc,OACxC,KAAK,UAAU,UAAU,IAAI,uBAG7B,GAAI,GAAM,SAAS,cAAc,kBACjC,WAAK,YAAY,KAAK,WAI1B,gBAAiB,CACb,GAAI,GAAqB,KAAK,YAC9B,KAAK,iBAAmB,EAAmB,aAC3C,EAAmB,aAAe,AAAC,GAAM,CACrC,GAAI,GAAO,EAAmB,iBAAiB,GAC/C,KAAK,mBAAmB,EAAG,IAKnC,iBAAkB,CACd,GAAI,GAAqB,KAAK,YAC9B,EAAmB,aAAe,KAAK,iBAG3C,mBAAmB,EAAkB,EAAmC,CACpE,KAAK,oBAEL,GAAI,GAAK,EAAG,EAAO,IAGvB,QAAQ,EAAoB,CACxB,KAAK,UAAU,YAAY,GAG/B,WAAW,EAAoB,CAC3B,KAAK,UAAU,YAAY,GAGvB,aAAa,EAAG,CACpB,KAAK,oBAGT,mBAAoB,CAChB,KAAO,KAAK,UAAU,YAClB,KAAK,UAAU,YAAY,KAAK,UAAU,cHxD/C,GAAM,GAAa,GAAI,GAEvB,YAAoB,CACvB,EAAW,iBAGR,YAAsB,CACzB,EAAW",
  "names": []
}
